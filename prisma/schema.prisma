generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String           @map("firstName")
  lastName       String           @map("lastName")
  email          String           @unique @map("email")
  phone          String?          @map("phone")
  password       String?          @map("password")
  emailVerified  Boolean?         @default(false)
  otp            String?          @map("otp")
  otpExpiry      DateTime?        @map("otpExpiry")
  image          String?          @map("image")
  role           String           @default("Client") @map("role")
  createdAt      DateTime         @default(now()) @map("createdAt")
  updatedAt      DateTime         @updatedAt @map("updatedAt")
  accounts       Account[]
  notes          Note[]           
  teamLead       Team[]           @relation("TeamLead")
  projects       Project[]        @relation("UserProjects")
  projectsAsClient Project[]      @relation("ClientProjects")
  tasksAssigned  Task[]           @relation("UserTasks")

  @@map("Users")
}

model Note {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  authorId      String
  title         String
  description   String?
  tags          String[]
  author        User     @relation(fields: [authorId], references: [id], onDelete: Cascade) 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Team {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  teamName       String
  teamLead       User             @relation("TeamLead", fields: [teamLeadId], references: [id])
  teamLeadId     String           @db.ObjectId
  membersIds     String[]         @db.ObjectId
  description    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  projects       Project[]        @relation("TeamProjects")

  @@map("Teams")
}

model Project {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  dueDate         DateTime
  budget          Int?
  priority        String       
  status          String?
  totalTasks      Int          @default(0)
  completedTasks  Int          @default(0)
  
  teamId          String       @db.ObjectId
  clientId        String?      @db.ObjectId
  userId          String
  
  team            Team         @relation("TeamProjects", fields: [teamId], references: [id])
  client          User?        @relation("ClientProjects", fields: [clientId], references: [id])
  user            User         @relation("UserProjects", fields: [userId], references: [id], onDelete: Cascade)
  tasks           Task[]       @relation("ProjectTasks")
        
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@map("Projects")
}

model Task {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  priority    String       @default("Normal")
  status      String       @default("Not Started")
  projectId   String       @db.ObjectId
  assignedTo  String       @db.ObjectId
  project     Project      @relation("ProjectTasks", fields: [projectId], references: [id], onDelete: Cascade)
  assignee    User         @relation("UserTasks", fields: [assignedTo], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("Tasks")
}
