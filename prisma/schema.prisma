generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String           @map("firstName")
  lastName       String           @map("lastName")
  email          String           @unique @map("email")
  phone          String?          @map("phone")
  password       String?          @map("password")
  image          String?          @map("image")
  otp            String?          @map("otp")
  otpExpiry      DateTime?        @map("otpExpiry")
  emailVerified  Boolean          @default(false) @map("emailVerified")
  role           String           @default("client") @map("role")
  createdAt      DateTime         @default(now()) @map("createdAt")
  updatedAt      DateTime         @updatedAt @map("updatedAt")
  accounts       Account[]
  notes          Note[]           
  teamLead       Team[]           @relation("TeamLead")
  TeamMembership TeamMembership[]

  @@map("Users")
}

model Note {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String?
  tags      String[]
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  teamName       String
  teamLead       User             @relation("TeamLead", fields: [teamLeadId], references: [id])
  teamLeadId     String           @db.ObjectId
  description    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  TeamMembership TeamMembership[] 

  @@map("Teams")
}

model TeamMembership {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  teamId    String @db.ObjectId
  userId    String @db.ObjectId
  team      Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User   @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
  @@map("TeamMemberships")
}
